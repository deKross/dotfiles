{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1920,"height":1080},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/home/artur/Projects/steelkiwi/rita/src/rita","buffers":[{"text":"# encoding: utf-8\n\nimport string\nimport random\n\nfrom decimal import Decimal\nfrom web.auth import user\nfrom web.core import request, session\nfrom web.core.http import HTTPFound, HTTPNotFound\nfrom web.core.locale import _, set_lang, LanguageError\nfrom marrow.util.convert import boolean\nfrom marrow.util.object import load_object as load\nfrom marrow.util.convert import KeywordProcessor\nfrom marrow.mailer.validator import EmailValidator\n\nfrom rita.util.predicate import authorize, authenticated, is_administrator\nfrom rita.util.controller import RootController\nfrom rita.util.formatter import standard_translated\n\n\nlog = __import__('logging').getLogger(__name__)\nreviewer_proc = KeywordProcessor(\",;\\n\", normalize=lambda s: s.lower().strip(), result=list)\n\n\ndef static(tmpl):\n    def inner(self, **kw):\n        return tmpl, dict()\n    return inner\n\n\nclass Root(RootController):\n    \"\"\"Site root controller.\n    \n    Effectively the container for the / root path.\n    \n    Attach other controllers, methods, and/or use mixins to provide accessible URLs.\n    \"\"\"\n    \n    # Site Sub-Sections\n    \n    account = load('rita.auth.controller:AuthMethods')()\n    dashboard = load('rita.dashboard.controller:DashboardController')()\n    source = load('rita.supplier.controller:SuppliersController')()\n    user = load('rita.auth.controller.manage:UsersController')()\n    job = load('rita.job.controller:JobsController')()\n    company = load('rita.company.controller:CompaniesController')()\n    service = load('rita.service.controller:ServicesController')()\n    report = load('rita.report.controller:ReportsController')()\n    invoice = load('rita.invoice.controller:Invoices')()\n    notification = load('rita.notification.controller:NotificationController')()\n    location = load('rita.location.controller:LocationController')()\n    package = load('rita.package.controller:PackageController')()\n    wrap = load('rita.wrap.controller:WrapController')()\n    \n    # Static Content\n    \n    def index(self):\n        \"\"\"Public welcome/about page.\n        \n        URL: / [ANY] (Public)\n        \"\"\"\n        if user._current_obj():\n            raise HTTPFound(location='/dashboard/')\n        \n        choices = string.ascii_lowercase + string.ascii_uppercase + string.digits\n        session['token'] = ''.join(random.choice(choices) for _ in range(64))\n        session.save()\n        \n        return 'rita.template.site.home', dict()\n    \n    def do_contact(self, token, email, name=None, message=None, company=None, employees=None, phone=None):\n        from rita.util import mail\n        \n        token = token.strip()\n        if token != session['token']:\n            return 'json:', dict(success=False, message=_(\"Invalid CSRF token; please refresh your browser.\"))\n        \n        email = email.strip().replace('\\n', '').replace('\\r', '')\n        email, err = EmailValidator().validate(email)\n        \n        if name is not None or message is not None:\n            name = name.strip().replace('\\n', '').replace('\\r', '')\n            message = message.strip()\n            \n            if not all([name, message]):\n                return 'json:', dict(success=False, message=_(\"Incomplete form.\"))\n            if not email or err:\n                return 'json:', dict(success=False, message=_(\"Invalid e-mail address.\"))\n            \n            try:\n                message = mail.new(\n                        subject = \"Message from {0}.\".format(name),\n                        reply = email,\n                        to = ['rita@illicohodes.com', 'lpimpare@illicohodes.com'],\n                        plain = \"Name: {0}\\nE-Mail: {1}\\nCompany: {2}\\nPhone: {3}\\nEmployees: {4}\\n\\n{5}\".format(\n                                name, email,\n                                company or \"N/A\",\n                                phone or \"N/A\",\n                                employees or \"N/A\",\n                                message\n                            )\n                    )\n            except:\n                log.exception(\"Failed to construct message.\")\n                return 'json:', dict(success=False, message=_(\"Invalid address.\"))\n            \n            message.send()\n            \n            return 'json:', dict(success=True, message=_(\"Message sent.\"))\n        \n        if not email or err:\n            return 'json:', dict(success=False, message=_(\"Invalid e-mail address.\"))\n        \n        try:\n            message = mail.new(\n                    subject = \"RITA demonstration request.\",\n                    reply = \"do-not-reply@illicohodes.com\",\n                    to = ['rita@illicohodes.com', 'lpimpare@illicohodes.com'],\n                    plain = \"Demonstration request from: {0}\".format(email)\n                )\n        except:\n            log.exception(\"Unable to construct message.\")\n            return 'json:', dict(success=False, message=_(\"Invalid address.\"))\n        \n        message.send()\n        \n        return 'json:', dict(success=True, message=_(\"One of our service agents will contact you.\"))\n    \n    about = static('rita.template.site.about')\n    soon = static('rita.template.site.coming-soon')\n    demo = static('rita.template.site.demo')\n    features = static('rita.template.site.features')\n    services = static('rita.template.site.services')\n    sources = static('rita.template.site.sources')\n    colophon = static('rita.template.site.colophon')\n    \n    def contact(self):\n        if request.is_xhr:\n            return 'rita.template.contact', dict()\n        \n        choices = string.ascii_lowercase + string.ascii_uppercase + string.digits\n        session['token'] = ''.join(random.choice(choices) for _ in range(64))\n        session.save()\n        \n        return 'rita.template.site.contact', dict()\n    \n    # Everything Else\n    \n    def go(self, invoice, supplier, lang='en'):\n        from rita.invoice.model import Invoice\n        from rita.analytics.model import Hit\n        \n        try:\n            invoice = Invoice.objects.get(id=invoice)\n        except:\n            log.exception(\"Failed to look up invoice: %s\", invoice)\n            raise HTTPNotFound()\n        \n        Hit.record(invoice, supplier, lang)\n        \n        raise HTTPFound(location=invoice.job.site[lang])\n    \n    def approve(self, invoice, code):\n        from rita.util import validate\n        from rita.invoice.model import Invoice\n        \n        try:\n            invoice = Invoice.objects.get(id=invoice, state='inc')\n        except:\n            log.exception(\"Unable to load record for approval: %s\", invoice)\n            return 'rita.template.reviewed', dict(success=False)\n        \n        success = validate(invoice.id.binary, code)\n        \n        if not success:\n            return 'rita.template.reviewed', dict(success=False)\n        \n        invoice.state = 'pen'\n        invoice.save()\n        \n        return 'rita.template.reviewed', dict(success=True)\n    \n    def tour(self, fname):\n        return \"mako:rita.template.tour\", dict(), dict(content_type='application/javascript')\n    \n    def progress(self):\n        return 'rita.template.navigation.checkout', dict(), dict(only='checkout')\n    \n    def review(self, company=None, reviewers=None, notes=None, cc=None, job=None, source=None, payee=None, **kw):\n        from rita.job.model import Posting, Review\n        from rita.company.model import Company\n        from rita.job.model import Job\n        \n        from rita.invoice.model import obj_from_raw, Invoice\n        \n        # PHP and jQuery array argument style adjustments.\n        if 'source[]' in kw: source = kw['source[]']\n        if 'reviewer[]' in kw: reviewers = ';'.join(kw['reviewer[]'])\n        if 'cc[]' in kw: cc = ';'.join(kw['cc[]'])\n        \n        job = obj_from_raw(Job, job if job else user.job)\n        source = source if source else user.supplier.keys()\n        \n        if not company:\n            company = job.company\n            \n            while not company.invoiceable and company.parent:\n                company = company.parent\n        else:\n            company = obj_from_raw(Company, company)\n        \n        if not company.invoiceable: company = None\n        \n        companies = Company.objects(invoiceable=True)\n        if not user.admin:\n            companies = companies.filter(id__in=[i.id for i in user.companies])\n        if not company and len(companies) == 1:\n            company = companies.first()\n        \n        if not payee:\n            payee = company.payee if company and company.payee else user.name\n        \n        invoice, used_packages = Invoice.new(\n                creator = user._current_obj(),\n                company = company,\n                job = job,\n                sources = source,\n                services = user.service.keys(),\n                reviewer = reviewers,\n                cc = cc,\n                notes = notes,\n                payee = payee,\n            )\n        \n        if request.method == 'POST':\n            if not company or not company.invoiceable:\n                return dict(success=False, message=_(\"Selected company is not invoiceable.\"))\n            \n            if not isinstance(invoice, Invoice):\n                return invoice\n            \n            # Step 1: Save the invoice.\n            \n            invoice.save()\n            \n            # Step 2: Process packages.\n            \n            # TODO: RACE CONDITION\n            for package, deduct in used_packages:\n                if deduct:\n                    package.amount = package.amount - deduct\n                    package.save()\n            \n            # Step 3: Trigger a posting.\n            \n            job.postings.append(Posting(\n                    targets = {str(i.id): j for i, j in invoice.supplier_urls.iteritems()},\n                    services = invoice.services,\n                    reviews = [Review(reviewer=i) for i in invoice.reviewers],\n                    invoice = invoice\n                ))\n            \n            job.save()\n            \n            # Step 4: Clear the user's selections.\n            \n            user.job = None\n            \n            user.supplier = dict()\n            user.service = dict()\n            user.save()\n            \n            return dict(success=True, message=_(\"Order submitted.\"), invoice=invoice.__json__())\n        \n        if request.is_xhr:\n            return 'rita.template.review', dict(area='review', invoice=invoice, company=company, companies=companies, payee=payee), dict(only='modal', future_imports=['unicode_literals'])\n        \n        return 'rita.template.review', dict(area='review', invoice=invoice, company=company, companies=companies, payee=payee), dict(only='modal', future_imports=['unicode_literals'])\n    \n    # Assistive Methods\n    \n    @authorize(authenticated)\n    def private(self):\n        \"\"\"Sample protected controller method.\n        \n        URL: /private [ANY] (Protected)\n        \"\"\"\n        return 'rita.template.test', dict(area='dash')\n    \n    def lang(self, lang):\n        \"\"\"Set the session language.\n        \n        URL: /lang/<lang> [GET] (Public)\n        URL: /lang [POST] (Public)\n        \"\"\"\n        \n        try:\n            set_lang(lang)\n        except LanguageError:\n            if request.method != 'GET' or request.is_xhr:\n                return 'json:', dict(success=False, reason='invalid', message=\"Unknown or invalid langauge code: \" + lang)\n            \n            # TODO: Flash message this.\n            return _(\"Unable to select language.\")\n        \n        u = user._current_obj()\n        \n        if u:\n            u.language = lang\n            u.save()\n        \n        if request.method != 'GET' or request.is_xhr:\n            return 'json:', dict(success=True)\n        \n        raise HTTPFound(location=request.referrer)\n    \n    @authorize(is_administrator)\n    def die(self, template=False, **kw):\n        \"\"\"Cause an internal explosion for diagnostic purposes.\n        \n        URL: /die [GET] (Public)  -- controller exception\n        URL: /die/true [GET] (Public)  -- template exception\n        \"\"\"\n        \n        template = boolean(template)\n        \n        if template:\n            return 'rita.template.die', dict()\n        \n        1/0\n    \n    def schedule_sync(self):\n        from rita.wrap.worker import schedule\n        from rita.wrap.model import Wrap\n        \n        for i in Wrap.objects.scalar('id'):\n            schedule(i)\n    \n    def import_run_oGufu9piel0eighoo0aequ2xeshuxaeY(self):\n        from rita.wrap.integrator.kenexa import KenexaAPIJobSync\n        \n        result = KenexaAPIJobSync('transcontinental', employee=12345, partner=25783, site=5113,\n                extra={'reference': 7181, 'title': 7157, 'city': 7162, 'region': 4936})()\n        \n        return \"Kenexa synchronization for transcontinental {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n    \n    def import_run_AD5reengaiphoraefi7Jie2koh3Ohth2(self):\n        from rita.wrap.integrator.kenexa import KenexaAPIJobSync\n        \n        result = KenexaAPIJobSync('sandoz-1', employee=12345, partner=13617, site=5269,\n                filter={20152: 'Sandoz', 20146: 'Canada'},\n                extra={'reference': 1927, 'title': 1951, 'city': 20147})()\n        \n        return \"Kenexa synchronization for sandoz {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n    \n    def import_run_Reew0ingiu7car3iehaiTeirierei2iD(self):\n        from rita.wrap.integrator.taleo import TaleoSitemapJobSync\n        \n        result = TaleoSitemapJobSync(\n                'banque-nationale',\n                prefix = 'banquenationaleducanada',\n                portal = 'e8k61cf',\n                lang = ['en', 'fr'],\n            )()\n        \n        return \"Taleo synchronization for banque-nationale {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n    \n    def import_run_jaizie7noh7Aequeexoezeirahcah3Pe(self):\n        from rita.wrap.integrator.taleo import TaleoSitemapJobSync\n        \n        result = TaleoSitemapJobSync(\n                'desjardins',\n                prefix = 'desjardins',\n                portal = '2',\n                lang = ['en', 'fr'],\n            )()\n        \n        return \"Taleo synchronization for desjardins {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n    \n    def import_run_Shoo7eij4Ra7Xu7xeishohhietoov3oc(self):\n        from rita.wrap.integrator.taleo import TaleoSitemapJobSync\n        \n        result = TaleoSitemapJobSync(\n                'radio-canada',\n                prefix = 'cbc',\n                portal = '2',\n                lang = ['en', 'fr'],\n            )()\n        \n        return \"Taleo synchronization for radio-canada {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n    \n    def import_run_Wohgh3eiroowiph0OhLoh7soo9ePuk7w(self):\n        from rita.wrap.integrator.cogeco import CogecoJobSync\n        \n        result1 = CogecoJobSync('cogeco', 'on')()\n        result2 = CogecoJobSync('cogeco', 'qc')()\n        \n        return \"Cogeco Ontario synchronization {0} jobs total, imported {1}, skipped {2}.\\nCogeco Quebec synchronization {0} jobs total, imported {1}, skipped {2}.\".format(\n                result1['total'], result1['imported'], result1['skipped'],\n                result2['total'], result2['imported'], result2['skipped']\n            )\n    \n    def import_run_ee1aeziequah4mo4ooch7Shael2cee2o(self):\n        from rita.wrap.integrator.taleosmb import TaleoSmallBusinessJobSync\n        \n        result = TaleoSmallBusinessJobSync(\n                'investissement-qu-bec',\n                org='INVESTISSEMENTQUEBEC'\n            )()\n        \n        return \"Taleo SMB synchronization for investissement-qu-bec {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n    \n    def import_run_oc1Jeib3Too8kughiineimaicae3AiSa(self):\n        from rita.wrap.integrator.chabot import RaymondChabotJobSync\n        \n        results = []\n        \n        for url in (\n                'http://www.rcgt.com/carrieres/emplois/domaine-services-conseil/',\n                'http://www.rcgt.com/carrieres/emplois/domaine-redressement-insolvabilite/',\n                'http://www.rcgt.com/carrieres/emplois/domaine-fiscalite/',\n                'http://www.rcgt.com/carrieres/emplois/domaine-certification/',\n                'http://www.rcgt.com/carrieres/emplois/domaine-administration/',\n                'http://www.rcgt.com/en/careers/emplois/area-administration/',\n                'http://www.rcgt.com/en/careers/emplois/area-assurance/',\n                'http://www.rcgt.com/en/careers/emplois/area-taxation/',\n                'http://www.rcgt.com/en/careers/emplois/area-recovery-reorganization/',\n            ):\n            result = RaymondChabotJobSync(company='raymond-chabot', endpoint=url)()\n            results.append(\"{0}: {1[total]} total {1[imported]} imported {1[skipped]} skipped\".format(url, result))\n        \n        return \"\\n\".join(results)\n    \n    def import_run_aiTeeghieChi1Su3oshae2zohd8yaer7(self):\n        from rita.wrap.integrator.taleo import TaleoSitemapJobSync\n        \n        result = TaleoSitemapJobSync(\n                'rio',\n                prefix = 'riotinto',\n                portal = '4',\n                lang = ['en', 'fr'],\n            )()\n        \n        return \"Taleo synchronization for rio {0} jobs total, imported {1}, skipped {2}.\".format(result['total'], result['imported'], result['skipped'])\n","markers":{"markers":{"1":{"id":1,"range":[[260,18],[260,18]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":29,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/home/artur/Projects/steelkiwi/rita/src/rita/controller.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"abb2a13eb87e58e4b5157a4cf17bb18c89be448b","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":29,"softTabs":true,"displayBuffer":{"id":30,"softWrap":false,"editorWidthInChars":165,"scrollTop":4910,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/artur/Projects/steelkiwi/rita/src/rita/controller.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/home/artur/Projects/steelkiwi/rita/src/rita/controller.py","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"packagesWithActiveGrammars":["language-python"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/home/artur/Projects/steelkiwi/rita/src/rita/controller.py":1404892370698},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":132590},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/home/artur/Projects/steelkiwi/rita/src/rita/controller.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}